 let currentStep=1; let bookingData={ customer: {}, services: [], date: null, time: null, distance: 0, travelCost: 0, subtotal: 0, total: 0, }; document.addEventListener("DOMContentLoaded", function (){loadServices(); initCalendar(); initAddressAutocomplete(); }); function calculateDistanceFromInput(){const addressInput=document.getElementById("address"); if (addressInput && addressInput.value.trim()){calculateDistance(addressInput.value.trim());}else{const distanceInfo=document.getElementById("distance-info"); const distanceText=document.getElementById("distance-text"); distanceText.innerHTML="<strong>Bitte geben Sie eine Adresse ein</strong>"; distanceInfo.className="alert alert-warning"; distanceInfo.style.display="block";}} function initAddressAutocomplete(){const addressInput=document.getElementById("address"); if (!addressInput) return; if (typeof google !== "undefined" && google.maps){const autocomplete=new google.maps.places.Autocomplete(addressInput,{types: ["address"], componentRestrictions:{country: "de" }, }); autocomplete.addListener("place_changed", function (){const place=autocomplete.getPlace(); if (place.geometry){calculateDistance(place.formatted_address);}});}addressInput.addEventListener("blur", function (){if ( this.value.trim() && (!bookingData.distance || bookingData.distance === 0) ){calculateDistance(this.value.trim());}}); addressInput.addEventListener("keypress", function (e){if (e.key === "Enter"){e.preventDefault(); if (this.value.trim()){calculateDistance(this.value.trim());}} });}async function calculateDistance(customerAddress){try{const distanceInfo=document.getElementById("distance-info"); const distanceText=document.getElementById("distance-text"); distanceInfo.className="alert alert-info"; distanceText.innerHTML="Entfernung wird berechnet..."; distanceInfo.style.display="block"; const response=await fetch("api/calculate-distance.php",{method: "POST", headers:{"Content-Type": "application/json" }, body: JSON.stringify({ address: customerAddress }), }); const data=await response.json(); if (data.success){bookingData.distance=data.distance; bookingData.travelCost=data.travelCost; let infoHtml=`<strong>Entfernung: ${data.distance.toFixed( 1 )} km</strong>`; if (data.usingGoogleMaps){infoHtml += ` <small style="color: var(--clr-success);">(✓ Google Maps)</small>`; if (data.duration){infoHtml += `<br><small>Fahrtzeit: ca. ${data.duration} Minuten</small>`;}} else if (data.message){infoHtml += ` <small style="color: var(--clr-warning);">(Demo-Modus)</small>`;}if (data.distance > 35){distanceText.innerHTML=infoHtml+`<br> <strong style="color: var(--clr-error);">Leider außerhalb unseres Servicegebiets (max. 35km)</strong>`; distanceInfo.className="alert alert-error"; document.querySelector('[onclick="nextStep()"]').disabled=true;}else if (data.distance > 10){distanceText.innerHTML=infoHtml+`<br> Anfahrtskosten: <strong>${data.travelCost.toFixed( 2 )}€</strong><br> Mindestbestellwert: <strong>59,90€</strong>`; distanceInfo.className="alert alert-warning"; document.querySelector('[onclick="nextStep()"]').disabled=false;}else{distanceText.innerHTML=infoHtml+`<br> <strong style="color: var(--clr-success);">Kostenlose Anfahrt!</strong>`; distanceInfo.className="alert alert-success"; document.querySelector('[onclick="nextStep()"]').disabled=false;}} else{distanceText.innerHTML=`<strong>Fehler:</strong> ${ data.error || "Entfernung konnte nicht berechnet werden" }`; distanceInfo.className="alert alert-error"; bookingData.distance=0; document.querySelector('[onclick="nextStep()"]').disabled=true;}distanceInfo.style.display="block";}catch (error){console.error("Error calculating distance:", error); const distanceInfo=document.getElementById("distance-info"); const distanceText=document.getElementById("distance-text"); distanceText.innerHTML="<strong>Fehler:</strong> Verbindung zum Server fehlgeschlagen"; distanceInfo.className="alert alert-error"; distanceInfo.style.display="block";}} async function loadServices(){try{const response=await fetch("api/get-services.php"); const services=await response.json(); const grid=document.getElementById("services-grid"); if (grid){grid.innerHTML=services .map( (service) => ` <div class="service-card" onclick="toggleService(${ service.id })" data-service-id="${service.id}"> <div class="service-card-bg" style="background-image: url('assets/images/services/${ service.background_image || "default.jpg" }')"></div> <div class="service-card-content"> <div class="service-card-top"> <h3>${service.name}</h3> <p class="service-card-description">${ service.description || "" }</p> </div> <div class="service-card-meta"> <span class="service-price">${parseFloat( service.price ).toFixed(2)}€</span> <span class="service-duration">${ service.duration_minutes}Min.</span> </div> </div> </div> ` ) .join(""); window.servicesData=services;}} catch (error){console.error("Error loading services:", error);}} function toggleService(serviceId){serviceId=parseInt(serviceId); const card=document.querySelector(`[data-service-id="${serviceId}"]`); if (!window.servicesData || !Array.isArray(window.servicesData)){console.error("Services data not loaded yet"); return;}const service=window.servicesData.find((s) => parseInt(s.id) === serviceId); if (!service){console.error("Service not found with ID:", serviceId); return;}if (card.classList.contains("selected")){card.classList.remove("selected"); bookingData.services=bookingData.services.filter( (s) => parseInt(s.id) !== serviceId );}else{card.classList.add("selected"); bookingData.services.push(service);}updateServicesSummary();}function updateServicesSummary(){if (!bookingData.services || bookingData.services.length === 0){document.getElementById("total-duration").textContent="0 Min."; document.getElementById("subtotal").textContent="0,00€"; bookingData.subtotal=0; const warning=document.getElementById("min-price-warning"); if (warning){warning.style.display="none";}return;}const totalDuration=bookingData.services.reduce((sum, s) =>{if (s && s.duration_minutes){return sum+parseInt(s.duration_minutes);}console.warn("Service missing duration_minutes:", s); return sum; }, 0); const subtotal=bookingData.services.reduce((sum, s) =>{if (s && s.price){return sum+parseFloat(s.price);}console.warn("Service missing price:", s); return sum; }, 0); document.getElementById( "total-duration" ).textContent=`${totalDuration} Min.`; document.getElementById("subtotal").textContent=`${subtotal.toFixed(2)}€`; bookingData.subtotal=subtotal; if (bookingData.time){bookingData.time=null; const timeSlots=document.querySelectorAll(".time-slot.selected"); timeSlots.forEach((slot) => slot.classList.remove("selected")); if (currentStep === 4){const container=document.getElementById("time-slots"); if (container){container.innerHTML='<p style="text-align: center; color: var(--clr-warning);">Services wurden geändert. Bitte Datum erneut auswählen.</p>';}}}if (bookingData.distance > 10){const warning=document.getElementById("min-price-warning"); if (warning){if (subtotal < 59.9){warning.style.display="block"; warning.innerHTML=`<strong>Hinweis:</strong> Bei einer Entfernung über 10km beträgt der Mindestbestellwert 59,90€. Aktuell: ${subtotal.toFixed(2)}€-Es fehlen noch ${( 59.9-subtotal ).toFixed(2)}€`;}else{warning.style.display="none";}}}} let currentMonth=new Date().getMonth(); let currentYear=new Date().getFullYear(); let blockedDaysData={ fullyBlocked: [], partiallyBlocked: [] }; function initCalendar(){loadBlockedDays().then(() =>{renderCalendar(); });}async function loadBlockedDays(){const monthStr=`${currentYear}-${String(currentMonth+1).padStart( 2, "0" )}`; try{const response=await fetch("api/check-blocked-days.php",{method: "POST", headers:{"Content-Type": "application/json" }, body: JSON.stringify({ month: monthStr }), }); const data=await response.json(); if (data.success){blockedDaysData=data;}} catch (error){console.error("Error loading blocked days:", error); blockedDaysData={ fullyBlocked: [], partiallyBlocked: [] };}} function renderCalendar(){const monthNames=[ "Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ]; const dayNames=["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]; document.getElementById( "calendar-month" ).textContent=`${monthNames[currentMonth]} ${currentYear}`; const firstDay=new Date(currentYear, currentMonth, 1).getDay(); const daysInMonth=new Date(currentYear, currentMonth+1, 0).getDate(); const today=new Date(); today.setHours(0, 0, 0, 0); let html=dayNames .map( (day) => `<div style="font-weight: bold; text-align: center; font-size: 0.75rem; text-transform: uppercase; letter-spacing: 0.05em; color: var(--clr-primary-a40);">${day}</div>` ) .join(""); for (let i=0; i < firstDay; i++){html += "<div></div>";}for (let day=1; day <= daysInMonth; day++){const date=new Date(currentYear, currentMonth, day); date.setHours(0, 0, 0, 0); const dateStr=formatDateForDB(date); const isPast=date < today; const isSunday=date.getDay() === 0; const isToday=date.getTime() === today.getTime(); const isFullyBlocked=blockedDaysData.fullyBlocked.includes(dateStr); const isPartiallyBlocked=blockedDaysData.partiallyBlocked.includes(dateStr); let classes="calendar-day"; if (isPast || isSunday || isFullyBlocked) classes += " disabled"; if (isToday) classes += " today"; if (bookingData.date === dateStr) classes += " selected"; if (isPartiallyBlocked && !isFullyBlocked) classes += " partially-blocked"; let title=""; let indicator=""; if (isPast){title="Vergangenes Datum";}else if (isSunday){title="Sonntags geschlossen";}else if (isFullyBlocked){title="Dieser Tag ist komplett blockiert"; indicator='<span style="position: absolute; top: 2px; right: 2px; color: var(--clr-error); font-size: 0.7rem;">✖</span>';}else if (isPartiallyBlocked){title="Einige Zeiten sind an diesem Tag blockiert"; indicator='<span style="position: absolute; top: 2px; right: 2px; color: var(--clr-warning); font-size: 0.7rem;">⚠</span>';}const isClickable=!isPast && !isSunday && !isFullyBlocked; html += `<div class="${classes}" onclick="${isClickable ? `selectDate('${dateStr}')` : ""}" data-date="${dateStr}" title="${title}" style="position: relative;"> ${day} ${indicator} </div>`;}document.getElementById("calendar-grid").innerHTML=html;}function formatDateForDB(date){const year=date.getFullYear(); const month=String(date.getMonth()+1).padStart(2, "0"); const day=String(date.getDate()).padStart(2, "0"); return `${year}-${month}-${day}`;}function changeMonth(direction){currentMonth += direction; if (currentMonth < 0){currentMonth=11; currentYear--;}else if (currentMonth > 11){currentMonth=0; currentYear++;}loadBlockedDays().then(() =>{renderCalendar(); });}const style=document.createElement("style"); style.textContent=` .calendar-day.partially-blocked{background: rgba(255, 152, 0, 0.1); border-color: var(--clr-warning);}.calendar-day.partially-blocked:hover:not(.disabled){background: rgba(255, 152, 0, 0.2);}.calendar-day.disabled{background: rgba(255, 255, 255, 0.02); cursor: not-allowed !important; opacity: 0.3;}`; document.head.appendChild(style); function selectDate(dateStr){document.querySelectorAll(".calendar-day.selected").forEach((el) =>{el.classList.remove("selected"); }); const dayElement=document.querySelector(`[data-date="${dateStr}"]`); if (dayElement){dayElement.classList.add("selected");}bookingData.date=dateStr; document.getElementById("date-continue").disabled=false; loadTimeSlots(dateStr);}async function loadTimeSlots(date){const dateObj=new Date(date+"T00:00:00"); const dayOfWeek=dateObj.getDay(); const weekdayStart=document.getElementById("time-slots").dataset.weekdayStart || "16:30"; const weekdayEnd=document.getElementById("time-slots").dataset.weekdayEnd || "21:00"; const saturdayStart=document.getElementById("time-slots").dataset.saturdayStart || "09:00"; const saturdayEnd=document.getElementById("time-slots").dataset.saturdayEnd || "14:00"; const slotDuration=parseInt( document.getElementById("time-slots").dataset.slotDuration || "30" ); const totalDuration=bookingData.services.reduce( (sum, s) => sum+parseInt(s.duration_minutes), 0 ); if (totalDuration === 0){document.getElementById("time-slots").innerHTML='<p style="text-align: center; color: var(--clr-warning);">Bitte wählen Sie zuerst Services aus.</p>'; return;}if (dayOfWeek === 0){document.getElementById("time-slots").innerHTML='<p style="text-align: center; color: var(--clr-error);">Sonntags geschlossen</p>'; return;}document.getElementById("time-slots").innerHTML='<p style="text-align: center;">Verfügbare Termine werden geprüft...</p>'; try{const response=await fetch("api/check-availability.php",{method: "POST", headers:{"Content-Type": "application/json" }, body: JSON.stringify({ date: date, duration: totalDuration, }), }); const result=await response.json(); const container=document.getElementById("time-slots"); if (!result.available){container.innerHTML=` <div class="alert alert-warning" style="grid-column: 1/-1;"> <strong>Keine passenden Termine verfügbar</strong><br> ${ result.message || "An diesem Tag ist nicht genügend zusammenhängende Zeit für Ihre gewählten Services verfügbar."}<br><br> ${result.info ? `<small>${result.info}</small><br>` : ""} <small>Benötigte Zeit: ${totalDuration} Minuten (+ Vor-/Nachbereitungszeit)<br> Bitte wählen Sie einen anderen Tag.</small> </div> `; document.getElementById("time-continue").disabled=true;}else if (result.blocked === "all"){container.innerHTML=` <div class="alert alert-error" style="grid-column: 1/-1;"> ${result.message || "Dieser Tag ist nicht verfügbar"} </div> `; document.getElementById("time-continue").disabled=true;}else if (result.slots && result.slots.length > 0){const availableCount=result.slots.filter((s) => s.available).length; const infoHtml=` <div style="grid-column: 1/-1; margin-bottom: 1rem;"> ${ result.info ? ` <div class="alert alert-info" style="margin-bottom: 1rem;"> <strong>ℹ️ Wichtiger Hinweis:</strong><br> Für optimale Servicequalität planen wir automatisch 30 Minuten Vor- und Nachbereitungszeit für jeden Termin ein. Dies garantiert Ihnen pünktlichen Service ohne Wartezeiten. </div> ` : ""}<small style="color: var(--clr-primary-a40);"> <strong>${availableCount} Termine verfügbar</strong> | Service-Dauer: ${totalDuration} Minuten ${ result.info ? ` | Gesamtzeit inkl. Puffer: ${totalDuration+60} Minuten` : ""}</small> </div> `; const calculateEndTime=(startTime, durationMinutes) =>{const [hours, minutes]=startTime.split(":").map(Number); const totalMinutes=hours*60+minutes+durationMinutes; const endHours=Math.floor(totalMinutes/60); const endMinutes=totalMinutes % 60; return `${String(endHours).padStart(2, "0")}:${String( endMinutes ).padStart(2, "0")}`; }; const slotsHtml=result.slots .map((slot) =>{const isAvailable=slot.available; const reasonText=slot.reason || ""; let tooltip=""; if (isAvailable){const endTime=calculateEndTime(slot.time, totalDuration); tooltip=result.info ? `Termin: ${slot.time}-${endTime} Uhr\n(+ 30 Min. Vor-/Nachbereitung)` : `Verfügbar: ${slot.time}-${endTime} Uhr`;}else{tooltip=reasonText || "Dieser Termin ist nicht verfügbar";}const hasBufferConflict=reasonText && reasonText.includes("inkl. Puffer"); return `<div class="time-slot ${!isAvailable ? "disabled" : ""}" onclick="${ isAvailable ? `selectTime('${slot.time}')` : "" }" title="${tooltip}" style="${ !isAvailable && reasonText ? "position: relative;" : "" }"> ${slot.time} ${ hasBufferConflict ? '<span style="position: absolute; top: -5px; right: -5px; background: var(--clr-warning); color: white; border-radius: 50%; width: 16px; height: 16px; font-size: 10px; display: flex; align-items: center; justify-content: center;">⏱</span>' : ""}</div>`; }) .join(""); container.innerHTML=infoHtml+slotsHtml; if (result.info){container.innerHTML += ` <div style="grid-column: 1/-1; margin-top: 2rem; padding: 1rem; background: var(--clr-surface-a10); border-radius: 8px;"> <small style="color: var(--clr-primary-a40);"> <strong>Legende:</strong><br> ✅ <span style="color: var(--clr-success);">Verfügbar</span>-Klicken Sie zur Auswahl<br> ⏱️ <span style="color: var(--clr-warning);">Mit Uhr-Symbol</span>-Blockiert wegen Pufferzeit eines anderen Termins<br> ❌ <span style="color: var(--clr-error-a60);">Grau</span>-Nicht verfügbar </small> </div> `;}} else{const blockedSlots=result; let startTime, endTime; if (dayOfWeek === 6){startTime=saturdayStart; endTime=saturdayEnd;}else{startTime=weekdayStart; endTime=weekdayEnd;}const slots=[]; let current=new Date(`2000-01-01 ${startTime}`); const end=new Date(`2000-01-01 ${endTime}`); while (current < end){const timeStr=current.toTimeString().slice(0, 5); slots.push(timeStr); current.setMinutes(current.getMinutes()+slotDuration);}const infoHtml=` <div style="grid-column: 1/-1; margin-bottom: 1rem;"> <small style="color: var(--clr-primary-a40);"> ${slots.length-(blockedSlots.length || 0)} Termine verfügbar | Dauer Ihrer Services: ${totalDuration} Minuten </small> </div> `; const slotsHtml=slots .map((slot) =>{const isBlocked=blockedSlots.includes(slot); return `<div class="time-slot ${isBlocked ? "disabled" : ""}" onclick="${!isBlocked ? `selectTime('${slot}')` : ""}"> ${slot} </div>`; }) .join(""); container.innerHTML=infoHtml+slotsHtml;}} catch (error){console.error("Error loading time slots:", error); document.getElementById("time-slots").innerHTML='<p style="text-align: center; color: var(--clr-error);">Fehler beim Laden der Termine</p>';}} function calculateEndTime(startTime, durationMinutes){const [hours, minutes]=startTime.split(":").map(Number); const totalMinutes=hours*60+minutes+durationMinutes; const endHours=Math.floor(totalMinutes/60); const endMinutes=totalMinutes % 60; return `${String(endHours).padStart(2, "0")}:${String(endMinutes).padStart( 2, "0" )}`;}function selectTime(time){document.querySelectorAll(".time-slot.selected").forEach((el) =>{el.classList.remove("selected"); }); event.target.classList.add("selected"); bookingData.time=time; document.getElementById("time-continue").disabled=false;}function validateStep(step){if (step === 1){const requiredCustomer=[ "first_name", "last_name", "email", "phone", "address", ]; const requiredVehicle=[ "car_brand", "car_model", "car_year", "license_plate", ]; const allRequired=[...requiredCustomer, ...requiredVehicle]; let valid=true; allRequired.forEach((field) =>{const input=document.getElementById(field); const error=input.nextElementSibling; if (!input.value.trim()){input.classList.add("error"); if (error) error.style.display="block"; valid=false;}else{input.classList.remove("error"); if (error) error.style.display="none"; bookingData.customer[field]=input.value.trim();}}); const emailInput=document.getElementById("email"); const emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/; if (!emailRegex.test(emailInput.value)){emailInput.classList.add("error"); const emailError=emailInput.nextElementSibling; if (emailError){emailError.textContent="Bitte gültige E-Mail-Adresse eingeben"; emailError.style.display="block";}valid=false;}const yearInput=document.getElementById("car_year"); const year=parseInt(yearInput.value); if (year < 1950 || year > 2026 || isNaN(year)){yearInput.classList.add("error"); const yearError=yearInput.nextElementSibling; if (yearError){yearError.textContent="Bitte gültiges Baujahr eingeben (1950-2026)"; yearError.style.display="block";}valid=false;}if (!bookingData.distance || bookingData.distance === 0){const addressInput=document.getElementById("address"); addressInput.classList.add("error"); const addressError=addressInput.nextElementSibling; if (addressError){addressError.textContent="Bitte Adresse eingeben und Entfernung berechnen lassen"; addressError.style.display="block";}valid=false;}return valid && bookingData.distance <= 35;}else if (step === 2){if (bookingData.services.length === 0){alert("Bitte wählen Sie mindestens einen Service aus."); return false;}if (bookingData.distance > 10 && bookingData.subtotal < 59.9){alert( "Bei einer Entfernung über 10km beträgt der Mindestbestellwert 59,90€" ); return false;}return true;}else if (step === 3){return bookingData.date !== null;}else if (step === 4){return bookingData.time !== null;}return true;}function nextStep(){if (!validateStep(currentStep)){return;}document .querySelector(`.step[data-step="${currentStep}"]`) .classList.remove("active"); document .querySelector(`.step[data-step="${currentStep}"]`) .classList.add("completed"); document.querySelector( `.step-panel[data-step="${currentStep}"]` ).style.display="none"; currentStep++; document .querySelector(`.step[data-step="${currentStep}"]`) .classList.add("active"); document.querySelector( `.step-panel[data-step="${currentStep}"]` ).style.display="block"; if (currentStep === 4){loadTimeSlots(bookingData.date);}else if (currentStep === 5){showSummary();}window.scrollTo(0, 0);}function previousStep(){document .querySelector(`.step[data-step="${currentStep}"]`) .classList.remove("active"); document.querySelector( `.step-panel[data-step="${currentStep}"]` ).style.display="none"; currentStep--; document .querySelector(`.step[data-step="${currentStep}"]`) .classList.remove("completed"); document .querySelector(`.step[data-step="${currentStep}"]`) .classList.add("active"); document.querySelector( `.step-panel[data-step="${currentStep}"]` ).style.display="block"; window.scrollTo(0, 0);}function showSummary(){document.getElementById("summary-customer").innerHTML=` <p><strong>${bookingData.customer.first_name} ${ bookingData.customer.last_name }</strong></p> <p>${bookingData.customer.email}</p> <p>${bookingData.customer.phone}</p> <p>${bookingData.customer.address}</p> ${ bookingData.customer.car_brand ? `<p>Fahrzeug: ${bookingData.customer.car_brand} ${ bookingData.customer.car_model || ""}${ bookingData.customer.car_year ? `(${bookingData.customer.car_year})` : "" }</p>` : ""}`; document.getElementById("summary-services").innerHTML=bookingData.services .map( (service) => ` <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;"> <span>${service.name} (${service.duration_minutes} Min.)</span> <span>${parseFloat(service.price).toFixed(2)}€</span> </div> ` ) .join("")+` <hr style="margin: 1rem 0; border-color: var(--clr-surface-a30);"> <div style="display: flex; justify-content: space-between;"> <strong>Zwischensumme:</strong> <strong>${bookingData.subtotal.toFixed(2)}€</strong> </div> ${ bookingData.travelCost > 0 ? ` <div style="display: flex; justify-content: space-between; margin-top: 0.5rem;"> <span>Anfahrtskosten (${bookingData.distance.toFixed(1)} km):</span> <span>${bookingData.travelCost.toFixed(2)}€</span> </div> ` : ""}`; const dateParts=bookingData.date.split("-"); const dateObj=new Date(dateParts[0], dateParts[1]-1, dateParts[2]); const dateStr=dateObj.toLocaleDateString("de-DE",{weekday: "long", year: "numeric", month: "long", day: "numeric", }); document.getElementById("summary-appointment").innerHTML=` <p><strong>Datum:</strong> ${dateStr}</p> <p><strong>Uhrzeit:</strong> ${bookingData.time} Uhr</p> <p><strong>Gesamtdauer:</strong> ${bookingData.services.reduce( (sum, s) => sum+parseInt(s.duration_minutes), 0 )} Minuten</p> `; bookingData.total=bookingData.subtotal+bookingData.travelCost; document.getElementById( "summary-total" ).textContent=`${bookingData.total.toFixed(2)}€`;}async function confirmBooking(){try{const response=await fetch("api/process-booking.php",{method: "POST", headers:{"Content-Type": "application/json" }, body: JSON.stringify(bookingData), }); const result=await response.json(); if (result.success){document.querySelector(`.step[data-step="5"]`).classList.remove("active"); document.querySelector(`.step[data-step="5"]`).classList.add("completed"); document.querySelector(`.step-panel[data-step="5"]`).style.display="none"; document.querySelector(`.step[data-step="6"]`).classList.add("active"); document.querySelector(`.step-panel[data-step="6"]`).style.display="block"; document.getElementById( "booking-number" ).textContent=`#${result.bookingNumber}`; fillPrintDetails(result.bookingNumber); window.scrollTo(0, 0);}else{alert("Ein Fehler ist aufgetreten. Bitte versuchen Sie es erneut.");}} catch (error){console.error("Error confirming booking:", error); alert("Ein Fehler ist aufgetreten. Bitte versuchen Sie es erneut.");}} function fillPrintDetails(bookingNumber){const formatLabel=(label) => `<span style="color: var(--clr-primary-a40); font-size: 0.85rem;">${label}:</span>`; const customerScreenHtml=` ${formatLabel("Name")}<br> <strong>${bookingData.customer.first_name} ${ bookingData.customer.last_name }</strong><br><br> ${formatLabel("E-Mail")}<br> ${bookingData.customer.email}<br><br> ${formatLabel("Telefon")}<br> ${bookingData.customer.phone}<br><br> ${formatLabel("Adresse")}<br> ${bookingData.customer.address} `; document.getElementById("confirmation-customer-details").innerHTML=customerScreenHtml; const vehicleScreenHtml=` ${formatLabel("Marke")}<br> <strong>${bookingData.customer.car_brand || "-"}</strong><br><br> ${formatLabel("Modell")}<br> ${bookingData.customer.car_model || "-"}<br><br> ${formatLabel("Baujahr")}<br> ${bookingData.customer.car_year || "-"}<br><br> ${formatLabel("Kennzeichen")}<br> <strong style="font-size: 1.1em; color: var(--clr-info);">${ bookingData.customer.license_plate || "-" }</strong> `; document.getElementById("confirmation-vehicle-details").innerHTML=vehicleScreenHtml; const dateParts=bookingData.date.split("-"); const dateObj=new Date(dateParts[0], dateParts[1]-1, dateParts[2]); const dateStr=dateObj.toLocaleDateString("de-DE",{weekday: "long", year: "numeric", month: "long", day: "numeric", }); const totalDuration=bookingData.services.reduce( (sum, s) => sum+parseInt(s.duration_minutes), 0 ); const appointmentScreenHtml=` ${formatLabel("Datum")}<br> <strong>${dateStr}</strong><br><br> ${formatLabel("Uhrzeit")}<br> <strong>${bookingData.time} Uhr</strong><br><br> ${formatLabel("Gesamtdauer")}<br> ${totalDuration} Minuten<br><br> ${formatLabel("Entfernung")}<br> ${bookingData.distance.toFixed(1)} km `; document.getElementById("confirmation-appointment-details").innerHTML=appointmentScreenHtml; let servicesScreenHtml='<table style="width: 100%; border-collapse: collapse;">'; servicesScreenHtml += '<thead><tr style="border-bottom: 1px solid var(--clr-surface-a30);">'; servicesScreenHtml += '<th style="padding: 0.5rem 0; text-align: left; font-size: 0.85rem; color: var(--clr-primary-a40);">Service</th>'; servicesScreenHtml += '<th style="padding: 0.5rem 0; text-align: right; font-size: 0.85rem; color: var(--clr-primary-a40);">Dauer</th>'; servicesScreenHtml += '<th style="padding: 0.5rem 0; text-align: right; font-size: 0.85rem; color: var(--clr-primary-a40);">Preis</th>'; servicesScreenHtml += "</tr></thead><tbody>"; bookingData.services.forEach((service) =>{servicesScreenHtml += ` <tr style="border-bottom: 1px solid var(--clr-surface-a20);"> <td style="padding: 0.75rem 0;">${service.name}</td> <td style="padding: 0.75rem 0; text-align: right;">${ service.duration_minutes}Min.</td> <td style="padding: 0.75rem 0; text-align: right;">${parseFloat( service.price ).toFixed(2)}€</td> </tr> `; }); servicesScreenHtml += ` <tr style="border-top: 1px solid var(--clr-surface-a30);"> <td colspan="2" style="padding: 0.75rem 0;"><strong>Zwischensumme:</strong></td> <td style="padding: 0.75rem 0; text-align: right;"><strong>${bookingData.subtotal.toFixed( 2 )}€</strong></td> </tr> `; if (bookingData.travelCost > 0){servicesScreenHtml += ` <tr> <td colspan="2" style="padding: 0.75rem 0;">Anfahrtskosten (${bookingData.distance.toFixed( 1 )} km):</td> <td style="padding: 0.75rem 0; text-align: right;">${bookingData.travelCost.toFixed( 2 )}€</td> </tr> `;}servicesScreenHtml += "</tbody></table>"; document.getElementById("confirmation-services").innerHTML=servicesScreenHtml; document.getElementById( "confirmation-total" ).textContent=`${bookingData.total.toFixed(2)}€`; const customerPrintHtml=` <div class="print-label">Name:</div> <div class="print-value">${bookingData.customer.first_name} ${bookingData.customer.last_name}</div> <div class="print-label">E-Mail:</div> <div class="print-value">${bookingData.customer.email}</div> <div class="print-label">Telefon:</div> <div class="print-value">${bookingData.customer.phone}</div> <div class="print-label">Adresse:</div> <div class="print-value">${bookingData.customer.address}</div> `; if (document.getElementById("print-customer-details")){document.getElementById("print-customer-details").innerHTML=customerPrintHtml;}const vehiclePrintHtml=` <div class="print-label">Marke:</div> <div class="print-value">${bookingData.customer.car_brand || "-"}</div> <div class="print-label">Modell:</div> <div class="print-value">${bookingData.customer.car_model || "-"}</div> <div class="print-label">Baujahr:</div> <div class="print-value">${bookingData.customer.car_year || "-"}</div> <div class="print-label">Kennzeichen:</div> <div class="print-value" style="font-weight: bold; font-size: 1.1em;">${ bookingData.customer.license_plate || "-" }</div> `; if (document.getElementById("print-vehicle-details")){document.getElementById("print-vehicle-details").innerHTML=vehiclePrintHtml;}let servicesPrintHtml=""; bookingData.services.forEach((service) =>{servicesPrintHtml += ` <tr> <td>${service.name}</td> <td style="text-align: right;">${ service.duration_minutes}Min.</td> <td style="text-align: right;">${parseFloat( service.price ).toFixed(2)}€</td> </tr> `; }); servicesPrintHtml += ` <tr style="border-top: 2px solid #000;"> <td colspan="2"><strong>Zwischensumme:</strong></td> <td style="text-align: right;"><strong>${bookingData.subtotal.toFixed( 2 )}€</strong></td> </tr> `; if (bookingData.travelCost > 0){servicesPrintHtml += ` <tr> <td colspan="2">Anfahrtskosten (${bookingData.distance.toFixed( 1 )} km):</td> <td style="text-align: right;">${bookingData.travelCost.toFixed( 2 )}€</td> </tr> `;}if (document.getElementById("print-services-body")){document.getElementById("print-services-body").innerHTML=servicesPrintHtml;}if (document.getElementById("print-total-amount")){document.getElementById( "print-total-amount" ).textContent=`${bookingData.total.toFixed(2)}€`;}const currentDate=new Date().toLocaleDateString("de-DE"); if (document.getElementById("print-date")){document.getElementById("print-date").textContent=currentDate;}if (document.getElementById("print-date-footer")){document.getElementById("print-date-footer").textContent=currentDate;}} function printConfirmation(){const printElements=document.querySelectorAll( ".print-header, .print-title, .print-footer" ); printElements.forEach((el) => (el.style.display="block")); window.print(); setTimeout(() =>{printElements.forEach((el) => (el.style.display="none")); }, 500);}function downloadPDF(){alert( 'PDF-Download wird vorbereitet...\n\nHinweis: Verwenden Sie alternativ "Drucken" und wählen Sie "Als PDF speichern" im Druckdialog.' ); printConfirmation();}function processPayment(){alert("Weiterleitung zur Zahlung...");}